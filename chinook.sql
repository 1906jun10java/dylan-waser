--2 SQL Queries
--2.1 SELECT
SELECT *
FROM EMPLOYEE;

SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';

SELECT *
FROM EMPLOYEE
WHERE FIRSTNAME = 'Andrew' AND REPORTSTO IS NULL;

--2.2 ORDER BY
SELECT *
FROM ALBUM
ORDER BY TITLE DESC;

SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY;

--2.3 INSERT INTO
INSERT INTO GENRE VALUES('26', 'Dubstep');
INSERT INTO GENRE VALUES('27', 'DrumNBass');

INSERT INTO EMPLOYEE VALUES(9, 'Waser', 'Dylan', '', '', '', '', '', '', '', '', '', '', '', '');
INSERT INTO EMPLOYEE VALUES(10, 'Messer', 'Braxton', 'IT Staff', 6, '02-APR-01', '04-jul-19', 'Somewhere Drive', 'Waynesville', 'NC', 'USA', '28786', '1234567890', '', 'messerb@gmail.com');

INSERT INTO CUSTOMER VALUES(60, 'Lee', 'Waser', '', '', '', '', '', '', '', '', 'fakeemail@yahoo.com', '');
INSERT INTO CUSTOMER VALUES(61, 'Tracey', 'Waser', '', '', '', '', '', '', '', '', 'anotherfake@yahoo.com', '');

--2.4 UPDATE
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = '32';

UPDATE ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5 LIKE
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--2.6 BEWTEEN
SELECT *
FROM INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM EMPLOYEE
WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

--2.7 DELETE
ALTER TABLE INVOICE DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE FROM CUSTOMER WHERE FIRSTNAME = 'Robert' AND LASTNAME = 'Walter';

--3 SQL Functions
--3.1 System Defined Functions
CREATE OR REPLACE FUNCTION CURRENT_TIME
RETURN TIMESTAMP
IS
BEGIN
    RETURN CURRENT_TIME;
END;
/
CREATE OR REPLACE FUNCTION MEDIA_NAME_LENGTH 
(MEDIA_NAME VARCHAR2)
RETURN INTEGER
IS
BEGIN
    RETURN LENGTH(MEDIA_NAME);
END MEDIA_NAME_LENGTH;
/

--3.2 System Defined Aggregate Functions
CREATE OR REPLACE FUNCTION AVERAGE_TINVOICES
RETURN NUMBER
IS
TOTAL NUMBER;    
CURSOR C1 IS SELECT AVG(TOTAL) FROM INVOICE;
BEGIN
    OPEN C1;
    FETCH C1 INTO TOTAL;    
    IF(C1%NOTFOUND) THEN
    TOTAL := 0;
END IF;
CLOSE C1;
RETURN TOTAL;
END AVERAGE_TINVOICES;
/

--3.3 User Defined Scalar Functions
CREATE OR REPLACE FUNCTION AVGINVOICELINE
RETURN NUMBER
IS
CURSOR C1 IS SELECT AVG(UNITPRICE) FROM INVOICELINE;
TOTAL NUMBER;
BEGIN
    OPEN C1;
    FETCH C1 INTO TOTAL;
    IF(C1%NOTFOUND) THEN
    TOTAL := 0;
END IF;
RETURN TOTAL;
END AVGINVOICELINE;
/

--3.4 User Defined Table Valued Functions
CREATE TYPE EMPROW AS OBJECT
(
    EMPLOYEEID NUMBER,
    LASTNAME VARCHAR2(100),
    FIRSTNAME VARCHAR2(100),
    TITLE VARCHAR2(100),
    REPORTSTO NUMBER,
    BIRTHDATE DATE,
    HIREDATE DATE,
    ADDRESS	VARCHAR2(100),
    CITY VARCHAR2(100),
    STATE VARCHAR2(100),
    COUNTRY	VARCHAR2(100),
    POSTALCODE VARCHAR2(100),
    PHONE VARCHAR2(100),
    FAX	VARCHAR2(100),
    EMAIL VARCHAR2(100)
);
/

CREATE TYPE EMPTAB AS TABLE OF EMPROW;
/

CREATE OR REPLACE FUNCTION BORNAFTER_1968
RETURN EMPTAB
AS
CURSOR C1 IS SELECT * FROM EMPLOYEE WHERE BIRTHDATE > TO_DATE('31-12-1968', 'DD-MM-YYYY');
EMP_T EMPTAB := EMPTAB();
EMPLOYEEID_V NUMBER;
LASTNAME_V	VARCHAR2(100);
FIRSTNAME_V	VARCHAR2(100);
TITLE_V	VARCHAR2(100);
REPORTSTO_V	NUMBER;
BIRTHDATE_V	DATE;
HIREDATE_V	DATE;
ADDRESS_V	VARCHAR2(100);
CITY_V	VARCHAR2(100);
STATE_V	VARCHAR2(100);
COUNTRY_V	VARCHAR2(100);
POSTALCODE_V	VARCHAR2(100);
PHONE_V	VARCHAR2(100);
FAX_V	VARCHAR2(100);
EMAIL_V	VARCHAR2(100);
BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO EMPLOYEEID_V, LASTNAME_V, FIRSTNAME_V, TITLE_V, REPORTSTO_V, BIRTHDATE_V, HIREDATE_V, ADDRESS_V, CITY_V, STATE_V,
        COUNTRY_V, POSTALCODE_V, PHONE_V, FAX_V, EMAIL_V;
        EXIT WHEN C1%NOTFOUND;
        EMP_T.EXTEND;
        EMP_T(EMP_T.LAST) := EMPROW(EMPLOYEEID_V, LASTNAME_V, FIRSTNAME_V, TITLE_V, REPORTSTO_V, BIRTHDATE_V, HIREDATE_V, ADDRESS_V, CITY_V, STATE_V,
        COUNTRY_V, POSTALCODE_V, PHONE_V, FAX_V, EMAIL_V);
    END LOOP;
    CLOSE C1;
    RETURN EMP_T;
END BORNAFTER_1968;
/

--4 Stored Procedures
--4.1 Basic Stored Procedure
CREATE OR REPLACE PROCEDURE EMPFULLNAME(EMPRES OUT SYS_REFCURSOR) AS 
BEGIN
OPEN EMPRES FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/
--4.2 Stored Procedure Input Parameters
CREATE OR REPLACE PROCEDURE EMPUPD(EMPLOYEEID_V NUMBER, LASTNAME_V VARCHAR2, FIRSTNAME_V VARCHAR2,
TITLE_V	VARCHAR2, REPORTSTO_V NUMBER, BIRTHDATE_V DATE, HIREDATE_V DATE, ADDRESS_V VARCHAR2, CITY_V	VARCHAR2,
STATE_V	VARCHAR2, COUNTRY_V	VARCHAR2, POSTALCODE_V	VARCHAR2, PHONE_V VARCHAR2, FAX_V VARCHAR2, EMAIL_V	VARCHAR2)
AS
BEGIN
UPDATE EMPLOYEE SET 
LASTNAME = LASTNAME_V,
FIRSTNAME = FIRSTNAME_V,
TITLE = TITLE_V,
REPORTSTO = REPORTSTO_V,
BIRTHDATE = BIRTHDATE_V,
HIREDATE = HIREDATE_V,
ADDRESS = ADDRESS_V,
CITY = CITY_V,
STATE = STATE_V,
COUNTRY = COUNTRY_V,
POSTALCODE = POSTALCODE_V,
PHONE = PHONE_V,
FAX = FAX_V,
EMAIL = EMAIL_V
WHERE EMPLOYEEID = EMPLOYEEID_V;
END;
/

CREATE OR REPLACE PROCEDURE EMPMAN(EMPLOYEE_ID IN NUMBER, MANAGER_ID OUT NUMBER) 
AS
MANNUM NUMBER;
BEGIN
    SELECT REPORTSTO INTO MANAGER_ID FROM EMPLOYEE WHERE EMPLOYEEID = EMPLOYEE_ID;
END;
/

--4.3 Stored Procedure Output Parameters
CREATE OR REPLACE PROCEDURE CUSTINFO(C_ID IN NUMBER, C_FIRSTNAME OUT VARCHAR2, C_LASTNAME OUT VARCHAR2, COM_NAME OUT VARCHAR2)
AS
BEGIN
    SELECT FIRSTNAME, LASTNAME, COMPANY INTO C_FIRSTNAME, C_LASTNAME, COM_NAME FROM CUSTOMER WHERE CUSTOMERID = C_ID;
END;
/

--5 Transactions
CREATE OR REPLACE PROCEDURE DELINV(INVID IN NUMBER)  
AS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE FROM INVOICE WHERE INVOICEID = INVID;
    DELETE FROM INVOICELINE WHERE INVOICEID = INVID;
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE ADD CONSTRAINT FK_INVOICELINEINVOICEID
    FOREIGN KEY (INVOICEID)
    REFERENCES INVOICE(INVOICEID)';
    COMMIT;
END;
/

--6 Triggers
--6.1 AFTER/FOR
CREATE OR REPLACE TRIGGER EMPINS
AFTER 
INSERT ON EMPLOYEE
BEGIN
    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER ALBUMUPD
AFTER 
INSERT ON ALBUM
BEGIN
    COMMIT;
END;
/

CREATE OR REPLACE TRIGGER CUSTDEL
AFTER 
INSERT ON CUSTOMER
BEGIN
    COMMIT;
END;
/

--7 Joins
--7.1 INNER
SELECT LASTNAME, FIRSTNAME, INVOICEID FROM (CUSTOMER INNER JOIN INVOICE ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID);
/

--7.2 OUTER
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL FROM (CUSTOMER FULL OUTER JOIN INVOICE on CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID);
/

--7.3 RIGHT
SELECT ARTIST.NAME, ALBUM.TITLE FROM (ALBUM RIGHT OUTER JOIN ARTIST ON ALBUM.ARTISTID = ARTIST.ARTISTID);
/

--7.4 CROSS
SELECT * FROM (ALBUM CROSS JOIN ARTIST) ORDER BY ARTIST.NAME ASC;
/

--7.5 SELF
SELECT E.LASTNAME AS LASTNAME1, E.FIRSTNAME AS FIRSTNAME1, M.LASTNAME AS LASTNAME2, M.FIRSTNAME AS FIRSTNAME2, E.REPORTSTO 
FROM (EMPLOYEE E JOIN EMPLOYEE M ON E.REPORTSTO = M.REPORTSTO);
/
